# This is a basic workflow to help you get started with Actions

name: CI/CD

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [master]
  pull_request:
    branches: [master]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: fastapi-cluster
  GKE_ZONE: asia-east1-b
  IMAGE: fastapi-k8s-demo

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Setup python version
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Runs a set of commands using the runners shell
      - name: Run test (pytest)
        env:
          DB_HOST: ${{ secrets.DEV_DB_HOST }}
          DB_DATABASE: ${{ secrets.DEV_DB_DATABASE }}
          DB_USERNAME: ${{ secrets.DEV_DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DEV_DB_PASSWORD }}

        run: |
          python -m pytest

  deploy:
    runs-on: ubuntu-20.04

    steps:
      # Setup docker build
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          export_default_credentials: true

        # Configure Docker to use the gcloud command-line tool as a credential
      - run: |
          gcloud --quiet auth configure-docker

        # Get the GKE credentials so we can deploy to the cluster
      - run: |
          gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"

      # Build Docker image
      - name: Build Docker Image
        run: |
          docker build \
          --tag "asia.gcr.io/$GCP_PROJECT_ID/$IMAGE:$GITHUB_SHA" \
          .

      - name: Push image to gcr
        run: |
          docker push "asia.gcr.io/$GCP_PROJECT_ID/$IMAGE:$GITHUB_SHA"

      - name: Deploy k8s cluster
        run: |
          kubectl apply -f deployment.yml
          kubectl set image deployment/fastapi-k8s-deployment app=asia.gcr.io/$GCP_PROJECT_ID/$IMAGE:$GITHUB_SHA
